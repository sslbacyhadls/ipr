CI/CD:
    Сборка -> Тестирование -> Развёртывание -> Поддержка

Middleware:
    Прослойка между ПО и операционной системой. Нужна для удобного развёртывания, мониторинга и упраления ресурсами приложения

    Сырой код -Компиляция-> Java байт код (.class) -> Развёртывание jvm -> Деплой классов -> Выполнение программы
    Память в Java:
    Куча -- место в оперативной памяти, где хранятся данные до их удаления GC
    Подразделяется на Young generation( Eden, Survivors), Old generation
    Xms, Xmx -- параметры для указания максимального и минимального значения памяти jvm
    Объект появляется в Eden

    В Copy collection, когда Eden заполняется, он перекидывает все объекты, на которые есть ссылки в Survivors. Всё остальное удаляется.
    Подходит только для небольших программ, так как останавливает выполнение всей программы, пока не завершит свою работу

    Mark-Sweep-Compact Collection сначала помечает объекты на удаление, затем удаляет их и смещает оставшееся вместе,
    что бы мог появиться большой объект

    При нехвате места в S, GC переносит объекты в Old generation

    Для анализа производительности JAVA приложения используют снимки кучи и стека

    Снимок кучи осуществляется утилитой jmap, снимок стека -- jstack
    Анализируя файлы дампа, можно понять, какие объекты занимают больше всего места в памяти

    Для удобного анализа кучи есть утилита jhat

    Tomcat -- утилита для запуска java-сервлетов. Это класс, реализующий API для приложения. По сути tomcat -- это веб сервер

Скрипты:
    https://gitlab.dks.lanit.ru/hcs/hcs_utils/-/blob/dtko_sync/dtko_sync/dtko_sync.sh
